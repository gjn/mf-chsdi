#
# The Apache mod_wsgi configuration file.
#
# We use mod_wsgi's daemon mode. And we assign a specific process
# group to the WSGI application.
#
# Note: once we use mod_wsgi 3 we'll be able to get rid of the
# Location block by passing process-group and application-group
# options to the WSGIScriptAlias directive.
#

RewriteEngine On
ExpiresActive On

AddOutputFilterByType DEFLATE text/css
AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/json
AddOutputFilterByType DEFLATE text/html text/plain text/xml

# Mobile rewrite TODO to be deleted after sept.. 2011
ServerAlias mobile.map.geo.admin.ch

RewriteCond %{HTTP_HOST}   ^mobile
RewriteCond $1 !\.(gif|jpe?g|png|css|js|ico)$ [NC]
RewriteRule ^/(.*)$   ${buildout:directory}/chsdi/public/demo/mobile.html$1 [L]

RewriteCond %{HTTP_HOST}   ^mobile
RewriteRule ^/(.*)$   ${buildout:directory}/chsdi/public/demo/$1 [L]

RedirectMatch ^${vars:apache-entry-point}$ /${vars:instanceid}/wsgi/doc/build/

# non cached urls:
RewriteRule ^/${vars:instanceid}/wsgi/(build|lib|GeoAdmin.ux|api|tests|doc|tileforge-doc|demo|capabilities)/(.*)$  ${buildout:directory}/chsdi/public/$1/$2

# legend urls
RewriteRule ^/${vars:instanceid}/wsgi/legend/(.*)$   ${buildout:directory}/chsdi/public/legend/$1
RewriteRule ^${vars:apache-entry-point}legend/(.*)$  ${buildout:directory}/chsdi/public/legend/$1

# cached urls:
RewriteRule ^/[0-9a-fA-F]*/${vars:instanceid}/wsgi/(build|lib|api|GeoAdmin.ux|demo)/(.*)$  ${buildout:directory}/chsdi/public/$1/$2
<LocationMatch /[0-9a-fA-F]*/${vars:instanceid}/wsgi/(build|lib|api|GeoAdmin.ux|demo)>
    ExpiresDefault "now plus 1 year"
    Header merge Cache-Control "public"
</LocationMatch>

# WMTS legacy services FIXME to be deleted after 1st June + 6 month
# api.geo.admin.ch/wmts and wmts[56789].geo.admin.ch/wmts
RewriteCond %{QUERY_STRING} lang=(de|fr)
RewriteRule ^${vars:apache-entry-point}wmts/WMTSCapabilities.xml ${buildout:directory}/chsdi/public/capabilities/WMTSGetCapabilities.%1.xml  [L]
# default to german
RewriteRule ^${vars:apache-entry-point}wmts/WMTSCapabilities.xml ${buildout:directory}/chsdi/public/capabilities/WMTSGetCapabilities.de.xml  [L]

# loader:
RewriteRule ^${vars:apache-entry-point}loader.js$ /${vars:instanceid}/wsgi/loader.js [PT]

# web services:
RewriteRule ^${vars:apache-entry-point}(cmslayer|wmts|bodsearch|feature|publishers|swisssearch|profile.json|profile.csv|height|checker)(.*)$ /${vars:instanceid}/wsgi/$1$2 [PT]

# Legacy WMST Capabilities auf static files
# RewriteCond %{HTTP_HOST}   ^wmts[01234]?
RewriteRule ^${vars:apache-entry-point}1.0.0/WMTSCapabiliti?es\.xml$ /${vars:instanceid}/wsgi/wmts [PT,NC,QSA]
RewriteRule ^${vars:apache-entry-point}1.0.0/legend/(.*)$  ${buildout:directory}/chsdi/public/legend/$1

# WMTS new-style (does not handle GetTile any more)
ServerAlias wmts.geo.admin.ch
ServerAlias wmts0.geo.admin.ch
ServerAlias wmts1.geo.admin.ch
ServerAlias wmts2.geo.admin.ch
ServerAlias wmts3.geo.admin.ch
ServerAlias wmts4.geo.admin.ch
ServerAlias wmts.swisstopo.admin.ch

# RewriteCond %{HTTP_HOST}   ^wmts[01234]?
RewriteRule ^${vars:apache-entry-point}1.0.0/WMTSCapabiliti?es\.xml$ /${vars:instanceid}/wsgi/wmts [PT,NC,QSA]
RewriteRule ^${vars:apache-entry-point}1.0.0/legend/(.*)$  ${buildout:directory}/chsdi/public/legend/$1

# print
RewriteRule ^${vars:apache-entry-point}print/(.*)$ /main/wsgi/print/$1 [PT]

# define a process group
WSGIDaemonProcess mf-chsdi:${vars:instanceid} display-name=%{GROUP} user=${vars:modwsgi_user}

# define the path to the WSGI app
WSGIScriptAlias /${vars:instanceid}/wsgi ${buildout:directory/buildout/parts/modwsgi/wsgi}

# assign the WSGI app instance the process group defined aboven, we put the WSGI
# app instance in the global application group so it is always executed within
# the main interpreter
<Location /${vars:instanceid}/wsgi>
    WSGIProcessGroup mf-chsdi:${vars:instanceid}
    WSGIApplicationGroup %{GLOBAL}
</Location>

# never cache the api loader
<Location /${vars:instanceid}/wsgi/loader.js>
    ExpiresDefault "access"
    Header merge Cache-Control "no-cache"
    Header unset ETag
    Header unset Last-Modified
</Location>


# Some services are not "free": TODO THIS IS A PROVISORY SOLUTION
SetEnvIf Referer "^http://mf-chmobil.bgdi.admin.ch"      GOODREF
SetEnvIf Referer "^http://mf-chmobil0i.bgdi.admin.ch"    GOODREF
SetEnvIf Referer "^http://mf-chmobil0t.bgdi.admin.ch"    GOODREF
SetEnvIf Referer "^http://mf-chmobil0t.lt.admin.ch"      GOODREF
SetEnvIf Referer "^http://mf-chsdi0i.bgdi.admin.ch"      GOODREF
SetEnvIf Referer "^http://mf-chsdi0t.bgdi.admin.ch"      GOODREF
SetEnvIf Referer "^http://mf-chsdi0t.lt.admin.ch"        GOODREF
SetEnvIf Referer "^http://mf-geoadmin2.bgdi.admin.ch"    GOODREF
SetEnvIf Referer "^http://mf-geoadmin20i.bgdi.admin.ch"  GOODREF
SetEnvIf Referer "^http://mf-geoadmin20t.bgdi.admin.ch"  GOODREF
SetEnvIf Referer "^http://mf-geoadmin20t.lt.admin.ch"    GOODREF
SetEnvIf Referer "^http://map.schweizmobil.ch"           GOODREF
SetEnvIf Referer "^http://map.wanderland.ch"             GOODREF
SetEnvIf Referer "^http://map.veloland.ch"               GOODREF
SetEnvIf Referer "^http://map.mountainbikeland.ch"       GOODREF
SetEnvIf Referer "^http://map.kanuland.ch"               GOODREF
SetEnvIf Referer "^http://map.skatingland.ch"            GOODREF
SetEnvIf Referer "^http://dev.geoext.org"                GOODREF
SetEnvIf Referer ".geo.admin.ch"                         GOODREF

SetEnvIf X-Forwarded-For "10.226.126.116"                GOODIP
SetEnvIf X-Forwarded-For "10.227.67.80"                  GOODIP
SetEnvIf X-Forwarded-For "46.51.190.137"                 GOODIP

<LocationMatch "^/${vars:instanceid}/(profile.json|profile.csv|height)">

   Order Deny,Allow
   Deny from all

   Allow from env=GOODIP
   Allow from env=GOODREF

</LocationMatch>
